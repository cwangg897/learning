도메인이란 SW해결해야할 문제이다.

### 도메인 모델
```
도메인 모델에는 다양하게 정의 한다.
도메인 모델은 특정 도메인을 개념적으로 표현한 것이다.
도메인 모델을 사용하면 도메인을 이해하고 도메인 지식을 공유하는데 도움이 된다.
왜냐하면 어떤 기능이나 어떤 정보가 있는지 파악가능 하기때문이다.
주문 도메인 보면 총금액, 배송정보 등등 
```

### 객체 기반 도메인 모델의 장점
객체기반은 도메인이 제공하는 기능이나 주요 데이터 구성을 파악할 수 있다.
이런면에서 기능과 데이터를 함꼐 보여주는 객체 모델은 도멩니을 모델링하기에 적합하다

### 상태 다이어그램 모델
도메인 모델 표현할 떄 꼭 클래스 다이터그램이나 상태 다이어그램과 같은 UML표기법만 사용하는 것은 아니다.
그러나 많이사용하는데는 이유가 있을 것이다. 즉 이말은 그래프나 상황에 따라 맞게 표시하는것을 사용해라


### 정리
도메인 모델은 기본적으로 도메인 자체를 이해하기 위한 개념 모델이니 개념모델을 가지고 코딩할 수 없으니 구현 모델이 따로 필요하다.
구현모델이 최대한 개념 모델을 따르도록 하는것은 필요하다. 

### 추가
도메인은 다수의 하위 도메인으로 구성된다. 각 하위 도메인이다루는 영역은 서로 다르기 떄문에 같은 용어라도 하위 도메인마다 
의미가 달라질 수 있다. ex) 카탈로그 도메인의 상품이 상품가격 상세 내용을 담고 있는 정보를 의밓나다면 배송 도메인의 상품은 고객에게 실제 배송되는 물리적인 상품을 의미한다.



### 도메인 모델 패턴
```
도메인 계층은 도메인의 핵심 규칙을 구현한다.
예를들어 주문 도메인의 경우 출고 전에 배송지를 변경할 수 있다. 규칙과 주문 취소는 배송 전에만 할 수 있다. 라는 규칙을 구현한 코드가
도메인 계층에 위치하게 된다. 이런 도메인 규칙을 객체 지향 기법으로 구현하는 패턴이 도메인 모델 패턴이다.
```

```java
package order;

public class Order {
    private OrderState state;
    private ShippingInfo shippingInfo;

    public void changeShippingInfo(ShippingInfo shippingInfo){
        if(!isShippingChangeable()){
            throw new IllegalStateException("can't change shipping in " + state);
        }
        this.shippingInfo = shippingInfo;
    }


    // 둘중 하나면 ture 아니면 false
    private boolean isShippingChangeable(){
        return state == OrderState.PAYMENT_WAITING || state == OrderState.PREPARING;
    }

}
```

### 핵심
```
핵심 규칙을 구현한 코드는 도메인 모델에만 위치하기 때문에 규칙이 바뀌거나 규칙을 확장해야 할 때 
다른 코드에 영향을 덜 주고 변경 내역을 모델에 반영할 수 있게 된다.
tmi: 도메인 모델은 개념적 객체적 둘중 하나인데 책에서는 객체를 도메인모델이라고 가리킨다고 한다.
```

## 도메인 모델 도출
